CHIP HalfAdder {
    IN a, b;    // 1 bit inputs
    OUT sum,    // Right bit of a + b
        carry;  // Left bit of a + b

    PARTS:
    Xor(a = a, b = b, out = sum);
    And(a = a, b = b, out = carry);
}

CHIP FullAdder {
    IN a, b, c;  // 1-bit inputs
    OUT sum,     // Right bit of a + b + c
        carry;   // Left bit of a + b + c

    PARTS:
    HalfAdder(a = a, b = b, sum = s1, carry = c1);
    HalfAdder(a = s1, b = c, sum = sum, carry = c2);
    Or(a=c1 , b = c2 , out = carry);
}

CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    FullAdder(a = a[0],  b = b[0],  c = false, sum = out[0],  carry = c1);
    FullAdder(a = a[1],  b = b[1],  c = c1,    sum = out[1],  carry = c2);
    FullAdder(a = a[2],  b = b[2],  c = c2,    sum = out[2],  carry = c3);
    FullAdder(a = a[3],  b = b[3],  c = c3,    sum = out[3],  carry = c4);
    FullAdder(a = a[4],  b = b[4],  c = c4,    sum = out[4],  carry = c5);
    FullAdder(a = a[5],  b = b[5],  c = c5,    sum = out[5],  carry = c6);
    FullAdder(a = a[6],  b = b[6],  c = c6,    sum = out[6],  carry = c7);
    FullAdder(a = a[7],  b = b[7],  c = c7,    sum = out[7],  carry = c8);
    FullAdder(a = a[8],  b = b[8],  c = c8,    sum = out[8],  carry = c9);
    FullAdder(a = a[9],  b = b[9],  c = c9,    sum = out[9],  carry = c10);
    FullAdder(a = a[10], b = b[10], c = c10,   sum = out[10], carry = c11);
    FullAdder(a = a[11], b = b[11], c = c11,   sum = out[11], carry = c12);
    FullAdder(a = a[12], b = b[12], c = c12,   sum = out[12], carry = c13);
    FullAdder(a = a[13], b = b[13], c = c13,   sum = out[13], carry = c14);
    FullAdder(a = a[14], b = b[14], c = c14,   sum = out[14], carry = c15);
    FullAdder(a = a[15], b = b[15], c = c15,   sum = out[15], carry = c16); // c16 is ignored
}


CHIP Inc16 {
    IN in[16];
    OUT out[16];

    PARTS:
    Add16
    (
        a = in, 
        b[0] = true,
        b[1] = false,
        b[2] = false,
        b[3] = false,
        b[4] = false,
        b[5] = false,
        b[6] = false,
        b[7] = false,
        b[8] = false,
        b[9] = false,
        b[10] = false,
        b[11] = false,
        b[12] = false,
        b[13] = false,
        b[14] = false,
        b[15] = false,
        out = out
    );
}

/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y  input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Preprocess x
    Mux16(a = x, b[0..15] = false, sel = zx, out = xz);
    Not16(in = xz , out = nxz);
    Mux16(a = xz, b = nxz, sel= nx, out = xa);
    
    // Preprocess y
    Mux16(a = y, b[0..15] = false, sel = zy, out = yz);
    Not16(in = yz, out = nyz);
    Mux16(a = yz, b = nyz, sel = ny, out = ya);

    // Process x & y || x + y
    Add16(a = xa , b = ya, out = xyadd);
    And16(a = xa, b = ya, out = xyand);
    Mux16(a = xyand, b = xyadd, sel = f, out = xyares);

    // Negate results res ? 0 : res
    Not16(in = xyares , out = nxyares);
    Mux16(a = xyares, b = nxyares, sel = no, out = out, out[15] = msb, out[0..7] = lowBits, out[8..15] = highBits);

    // Calculates any flag
    Or(a = msb, b = false, out = ng);
    
    // zr == 1 if all bits are 0
    Or8Way(in = lowBits, out = anyLow);
    Or8Way(in = highBits, out = anyHigh);
    Or(a = anyLow, b = anyHigh, out = anyBits);
    Not(in = anyBits, out = zr);
}
