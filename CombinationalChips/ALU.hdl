/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y  input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Preprocess x
    Mux16(a = x, b[0..15] = false, sel = zx, out = xz);
    Not16(in = xz , out = nxz);
    Mux16(a = xz, b = nxz, sel= nx, out = xa);
    
    // Preprocess y
    Mux16(a = y, b[0..15] = false, sel = zy, out = yz);
    Not16(in = yz, out = nyz);
    Mux16(a = yz, b = nyz, sel = ny, out = ya);

    // Process x & y || x + y
    Add16(a = xa , b = ya, out = xyadd);
    And16(a = xa, b = ya, out = xyand);
    Mux16(a = xyand, b = xyadd, sel = f, out = xyares);

    // Negate results res ? 0 : res
    Not16(in = xyares , out = nxyares);
    Mux16(a = xyares, b = nxyares, sel = no, out = out, out[15] = msb, out[0..7] = lowBits, out[8..15] = highBits);

    // Calculates any flag
    Or(a = msb, b = false, out = ng);
    
    // zr == 1 if all bits are 0
    Or8Way(in = lowBits, out = anyLow);
    Or8Way(in = highBits, out = anyHigh);
    Or(a = anyLow, b = anyHigh, out = anyBits);
    Not(in = anyBits, out = zr);
}
